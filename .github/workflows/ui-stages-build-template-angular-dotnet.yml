# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build UI Angular .NET App

on:
  workflow_call:
    inputs:
      serviceName:
        description: 'Service name'
        type: string
      buildVersion:
        description: 'Build version'
        type: string
      projectService:
        required: true
        type: string
      projectCsprojPath:
        required: true
        type: string

jobs:

  # npm-install:
  #   env:
  #     template: ../partial-templates/variables.yml
  #     buildConfiguration: Release
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./${{ inputs.projectService }}/ClientApp
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       persist-credentials: true
  #   - name: Npm install --legacy-peer-deps
  #     run: npm install --legacy-peer-deps 
  #     env:
  #       NODE_OPTIONS: --max_old_space_size=4096
  #       NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # calling-workflow-quality-gate-npm-pre-build:
  #   uses: MhpTransport/Ecovium.Github.Actions/.github/workflows/quality-gate-npm-pre-build-template.yml@develop
  #   # needs: npm-install
  #   # with:
  #   #   skipTests: false
  #   #   sonarQubeSC: SonarQubeSC

  # npm-run-build:
  #   needs: calling-workflow-quality-gate-npm-pre-build
  #   env:
  #     template: ../partial-templates/variables.yml
  #     buildConfiguration: Release
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./${{ inputs.projectService }}/ClientApp
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       persist-credentials: true
  #   - name: Npm install --legacy-peer-deps
  #     run: npm install --legacy-peer-deps
  #     env:
  #       NODE_OPTIONS: --max_old_space_size=4096
  #       NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #   - name: Npm run build
  #     run: npm run build --prod
  #     env:
  #       NODE_OPTIONS: --max_old_space_size=4096
  #       NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # calling-workflow-quality-gate-npm-template:
  #   uses: MhpTransport/Ecovium.Github.Actions/.github/workflows/quality-gate-npm-template.yml@develop
  #   needs: npm-run-build
  #   # with:
  #   #   skipTests: false
  #   #   sonarQubeSC: SonarQubeSC

  dotnet-build:
    # needs: calling-workflow-quality-gate-npm-template
    env:
      template: ../partial-templates/variables.yml
      buildConfiguration: Release
      ACR_NAME: ${{ secrets.ACR_NAME }}
      ACR_USER_NAME: ${{ secrets.ACR_USER_NAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      TAG: ${{ inputs.buildVersion }}-${{ github.run_id }}.${{ github.ref_name }}.${{ github.sha }}
      SERVICE_NAME: ${{ inputs.serviceName }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x.x'

    - name: Remove existing NuGet source
      run: |
        dotnet nuget remove source EcoviumCommon || echo "Source not found, skipping removal"

    - name: Dotnet restore
      run: dotnet restore ${{ inputs.projectCsprojPath }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: List Nuget Sources
      run: dotnet nuget list source

    - name: Dotnet Build
      run: dotnet build ${{ inputs.projectCsprojPath }} --configuration ${{ env.buildConfiguration }} -o app/build
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Dotnet Publish
      if: always()
      run: |
        dotnet publish \
        --configuration ${{ env.buildConfiguration }} \
        -o ${{ github.workspace }}/devops/ui/${{ inputs.projectService }}/docker/app/publish/

    - name: List files in app/publish
      if: always()
      run: |
        ls -R ${{ github.workspace }}/devops/ui/${{ inputs.projectService }}/docker/app/publish/
      shell: pwsh

    - name: Docker build and push
      if: always()
      run: |
        docker login "$ACR_NAME" --username "$ACR_USER_NAME" --password "$ACR_PASSWORD"    
        docker build . -t container/${{ inputs.serviceName }}:"$TAG"
        docker tag container/${{ inputs.serviceName }}:"$TAG" $ACR_NAME/container/${{ inputs.serviceName }}:"$TAG"
        docker push $ACR_NAME/container/${{ inputs.serviceName }}:"$TAG"
      working-directory: ${{ github.workspace }}/devops/ui/${{ inputs.projectService }}/docker
      shell: pwsh
