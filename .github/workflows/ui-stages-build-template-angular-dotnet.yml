# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build UI Angular .NET App

on:
  workflow_call:
    inputs:
      serviceName:
        description: 'Service name'
        type: string
      buildVersion:
        description: 'Build version'
        type: string
      projectService:
        required: true
        type: string
      projectCsprojPath:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:

  # npm-install:
  #   env:
  #     template: ../partial-templates/variables.yml
  #     buildConfiguration: Release
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./${{ inputs.projectService }}/ClientApp
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       persist-credentials: true
  #   - name: Npm install --legacy-peer-deps
  #     run: npm install --legacy-peer-deps 
  #     env:
  #       NODE_OPTIONS: --max_old_space_size=4096
  #       NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # calling-workflow-quality-gate-npm-pre-build:
  #   uses: MhpTransport/Ecovium.Github.Actions/.github/workflows/quality-gate-npm-pre-build-template.yml@develop
  #   # needs: npm-install
  #   # with:
  #   #   skipTests: false
  #   #   sonarQubeSC: SonarQubeSC

  # npm-run-build:
  #   needs: calling-workflow-quality-gate-npm-pre-build
  #   env:
  #     template: ../partial-templates/variables.yml
  #     buildConfiguration: Release
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./${{ inputs.projectService }}/ClientApp
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       persist-credentials: true
  #   - name: Npm install --legacy-peer-deps
  #     run: npm install --legacy-peer-deps
  #     env:
  #       NODE_OPTIONS: --max_old_space_size=4096
  #       NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #   - name: Npm run build
  #     run: npm run build --prod
  #     env:
  #       NODE_OPTIONS: --max_old_space_size=4096
  #       NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # calling-workflow-quality-gate-npm-template:
  #   uses: MhpTransport/Ecovium.Github.Actions/.github/workflows/quality-gate-npm-template.yml@develop
  #   needs: npm-run-build
  #   # with:
  #   #   skipTests: false
  #   #   sonarQubeSC: SonarQubeSC

  dotnet-build:
    # needs: calling-workflow-quality-gate-npm-template
    env:
      template: ../partial-templates/variables.yml
      buildConfiguration: Release
      ACR_NAME: ${{ secrets.ACR_NAME }}
      ACR_USER_NAME: ${{ secrets.ACR_USER_NAME }}
      ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
      TAG_NAME: ${{ inputs.buildVersion }}-${{ github.run_id }}.${{ github.ref_name }}.${{ github.sha }}    
      SERVICE_NAME: ${{ inputs.serviceName }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.x.x'

    - name: Remove existing NuGet source
      run: |
        dotnet nuget remove source EcoviumCommon || echo "Source not found, skipping removal"

    - name: Dotnet restore
      run: dotnet restore ${{ inputs.projectCsprojPath }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: List Nuget Sources
      run: dotnet nuget list source

    - name: Dotnet Build
      run: dotnet build ${{ inputs.projectCsprojPath }} --configuration ${{ env.buildConfiguration }} -o app/build
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Dotnet Publish
      if: always()
      run: |
        dotnet publish \
        --configuration ${{ env.buildConfiguration }} \
        -o ${{ github.workspace }}/devops/ui/${{ inputs.serviceName }}/docker/app/publish/

    - name: List files in app/publish
      if: always()
      run: |
        ls -R ${{ github.workspace }}/devops/ui/${{ inputs.serviceName }}/docker/app/publish/
      shell: pwsh

    # - name: Login to ACR
    #   uses: docker/login-action@v3
    #   with:
    #     registry: acrsimplechaindev.azurecr.io
    #     username: "$AZURE_CLIENT_ID"
    #     password: "$AZURE_CLIENT_SECRET"

    - uses: azure/login@v2
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS_ACR }}'
        client-id: '99b83713-5337-42d0-ba12-e6ca52bf4bed'
        tenant-id: 'a20b4497-21aa-49b1-9fac-f5d256ab7f35'
        subscription-id: '7ae7d6f7-74b7-4165-a38e-6cfc79f940b0'
        auth-type: IDENTITY

    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    # - name: Log in to Azure CLI
    #   uses: azure/login@v2
    #   with:
    #     creds: '${{ secrets.AZURE_CREDENTIALS_ACR }}'
    #     client-id: '99b83713-5337-42d0-ba12-e6ca52bf4bed'
    #     tenant-id: 'a20b4497-21aa-49b1-9fac-f5d256ab7f35'
    #     subscription-id: '7ae7d6f7-74b7-4165-a38e-6cfc79f940b0'
    #     enable-AzPSSession: true

    # - name: Azure CLI script
    #   uses: azure/cli@v2
    #   with:
    #     azcliversion: latest
    #     inlineScript: |
    #       az account show

    # # Log in to Azure Container Registry
    # - name: Log in to Azure Container Registry
    #   run: az acr login --name acrsimplechaindev.azurecr.io

    # - name: Docker build and push
    #   if: always()
    #   run: |
    #     export TAG=$(echo "${TAG_NAME}" | tr '/' '_')
    #     export SERVICE=$(echo "${SERVICE_NAME}")

    #     # az account set --subscription 7ae7d6f7-74b7-4165-a38e-6cfc79f940b0
    #     # docker login "$ACR_NAME" --username "$ACR_USER_NAME" --password "$ACR_PASSWORD"
    #     docker build . -t container/"$SERVICE":"$TAG"
    #     docker tag container/"$SERVICE":"$TAG" acrsimplechaindev.azurecr.io/container/"$SERVICE":"$TAG"
    #     docker push acrsimplechaindev.azurecr.io/container/"$SERVICE":"$TAG"
    #   working-directory: ${{ github.workspace }}/devops/ui/${{ inputs.serviceName }}/docker
