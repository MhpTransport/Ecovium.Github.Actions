# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Quality gate pre-build

on:
  workflow_call:
    # inputs:
    #   skipTests:
    #     description: 'skipTests'
    #     type: string
    #   sonarQubeSC:
    #     description: 'sonarQubeSC'
    #     type: string

jobs:

  quality-gate-prebuild:
    env:
      template: ../partial-templates/variables.yml  
    runs-on: ubuntu-latest
    steps:
    # - uses: actions/checkout@v4
    - name: Running quality-gate-prebuild
      run: echo "Running quality-gate-prebuild"
    # - name: Fetch SonarQube projectKey
    #   run: |
    #     $repositoryName = $env:BUILD_REPOSITORY_NAME
    #     ${{ env.sonarQubeProjectKey }} = $env:SONARQUBEPROJECTKEY

    #     if ([string]::IsNullOrEmpty(${{ env.sonarQubeProjectKey }})) {
    #       # Extract the repository name after the '/' character
    #       $repositoryName = $repositoryName | Split-Path -Leaf
    #       Write-Host "sonarQubeProjectKey is not set or empty. Filling it with $repositoryName."
    #       ${{ env.sonarQubeProjectKey }} = $repositoryName
    #       # Set the variable for the current job
    #       Write-Host "##vso[task.setvariable variable=sonarQubeProjectKey]${{ env.sonarQubeProjectKey }}"
    #     } else {
    #       Write-Host "sonarQubeProjectKey is already set to ${{ env.sonarQubeProjectKey }}."
    #     }
    #   shell: powershell
    # - name: Check SonarQube project exists
    #   run: |
    #     #TODO: use taskLib to get rid of ${{ env.sonarQubeEndpointUrl }}
    #     #$serviceConnectionId = Get-Input -Name $sonarQubeEndpoint
    #     #${{ env.sonarQubeEndpointUrl }} = Get-Endpoint -Name $serviceConnectionId

    #     $username = "${{ env.sonarQubeApiUserToken }}"
    #     $password = ""
    #     $base64Auth = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ env.$username }}:${{ env.$password }}"))
    #     $headers = @{
    #       "Authorization" = "Basic $base64Auth"
    #     }

    #     $uri = "${{ env.sonarQubeEndpointUrl }}/api/components/show?component=${{ env.sonarQubeProjectKey }}"

    #     try {
    #       $response = Invoke-RestMethod -Uri $uri -Method Get -Headers $headers -ErrorAction SilentlyContinue -TimeoutSec 60
    #       Write-Host "SonarQube project exists."
    #       Write-Host "##vso[task.setvariable variable=sonarQubeAvailable]$true"
    #     } catch {
    #       # $_.Exception.Response.StatusCode.value__ should be 404 here
    #       Write-Host "SonarQube doesn't exist. Setting sonarQubeAvailable variable to false."
    #       Write-Host "##vso[task.setvariable variable=sonarQubeAvailable]$false"
    #     }
    #   shell: powershell
